//`timescale 1ns / 1ps
////////////////////////////////////////////////////////////////////////////////////
//// Company: 
//// Engineer: Nageshwar - IIT Jammu <nagesh03mehta@gmail.com>
//// 
//// Design Name: 
//// Module Name: FFT64pt_wrapper_tb
//// Project Name: Cognitive Radio
//// Target Devices: 
//// Tool Versions: 
//// Description: 
//// 
//// Dependencies: 
//// 
//// Revision:
//// Revision 0.01 - File Created
//// Additional Comments:
//// 

////////////////////////////////////////////////////////////////////////////////////
//module FFT64pt_wrapper_tb();

//    reg aclk;
//    reg aresetn;
//    reg signed [15:0] in_data_real;
//    reg signed [15:0] in_data_imag;
//    reg in_valid;
//    reg in_last;
//    wire in_ready;
    
//    reg [7:0] config_data;
//    reg config_valid;
//    wire config_ready;
    
//    wire signed [15:0] out_data_real;  // unpacked from 32-bit FFT output bus
//    wire signed [15:0] out_data_imag;
//    wire out_valid;
//    wire out_last;
//    reg  out_ready;
    
//    reg [15:0] input_real[0:63];  // ROM for real input
//    reg [15:0] input_imag[0:63];  // ROM for imag input
    
//    integer f_real, f_imag;
//    integer i;
    
//    // DUT
//    FFT64pt_wrapper tb_in(
//        .aclk(aclk),
//        .aresetn(aresetn),
//        .in_data_real(in_data_real),
//        .in_data_imag(in_data_imag),
//        .in_valid(in_valid),
//        .in_last(in_last),
//        .in_ready(in_ready),
        
//        .config_data(config_data),
//        .config_valid(config_valid),
//        .config_ready(config_ready),
        
//        .out_data_real(out_data_real),
//        .out_data_imag(out_data_imag),
//        .out_valid(out_valid),
//        .out_last(out_last),
//        .out_ready(out_ready)
//    );
    
//    // Clock generation
//    initial aclk = 0;
//    always #5 aclk = ~aclk;  // 10 ns period
    
//    // Reset
//    initial begin
//        in_valid = 0;
//        in_last = 0;
//        in_data_real = 0;
//        in_data_imag = 0;
//        config_data = 0; //reset
//        config_valid = 0;
//        out_ready = 1;  // always ready

//        aresetn = 0;
//        repeat (5) @(posedge aclk);
//        aresetn = 1;
//    end
    
//    // Read input files generated by Python
//    initial begin
    
           
//        input_real[0]  = -16'sd2944;  // -5.7500
//        input_real[1]  = 16'sd2048;   //  4.0000
//        input_real[2]  = 16'sd1664;   //  3.2500
//        input_real[3]  = -16'sd1024;  // -2.0000
//        input_real[4]  = 16'sd256;    //  0.5000
//        input_real[5]  = 16'sd2816;   //  5.5000
//        input_real[6]  = 16'sd1024;   //  2.0000
//        input_real[7]  = 16'sd2688;   //  5.2500
//        input_real[8]  = -16'sd1920;  // -3.7500
//        input_real[9]  = -16'sd2304;  // -4.5000
//        input_real[10] = 16'sd3456;   //  6.7500
//        input_real[11] = 16'sd0;      //  0
//        input_real[12] = 16'sd1536;   //  3.0000
//        input_real[13] = 16'sd896;    //  1.7500
//        input_real[14] = 16'sd1152;   //  2.2500
//        input_real[15] = 16'sd0;      //  0
//        input_real[16] = -16'sd2176;  // -4.2500
//        input_real[17] = -16'sd1536;  // -3.0000
//        input_real[18] = -16'sd2688;  // -5.2500
//        input_real[19] = -16'sd1024;  // -2.0000
//        input_real[20] = 16'sd256;    //  0.5000
//        input_real[21] = -16'sd1408;  // -2.7500
//        input_real[22] = 16'sd1408;   //  2.7500
//        input_real[23] = 16'sd3072;   //  6.0000
//        input_real[24] = 16'sd2048;   //  4.0000
//        input_real[25] = -16'sd1792;  // -3.5000
//        input_real[26] = -16'sd2560;  // -5.0000
//        input_real[27] = -16'sd1664;  // -3.2500
//        input_real[28] = -16'sd2304;  // -4.5000
//        input_real[29] = 16'sd1920;   //  3.7500
//        input_real[30] = 16'sd3200;   //  6.2500
//        input_real[31] = 16'sd3328;   //  6.5000
//        input_real[32] = -16'sd3328;  // -6.5000
//        input_real[33] = 16'sd1792;   //  3.5000
//        input_real[34] = 16'sd384;    //  0.7500
//        input_real[35] = -16'sd1536;  // -3.0000
//        input_real[36] = -16'sd384;   // -0.7500
//        input_real[37] = -16'sd2688;  // -5.2500
//        input_real[38] = -16'sd2816;  // -5.5000
//        input_real[39] = 16'sd3456;   //  6.7500
//        input_real[40] = 16'sd640;    //  1.2500
//        input_real[41] = -16'sd2944;  // -5.7500
//        input_real[42] = -16'sd3328;  // -6.5000
//        input_real[43] = -16'sd2432;  // -4.7500
//        input_real[44] = -16'sd3328;  // -6.5000
//        input_real[45] = -16'sd2688;  // -5.2500
//        input_real[46] = 16'sd384;    //  0.7500
//        input_real[47] = 16'sd2816;   //  5.5000
//        input_real[48] = 16'sd2816;   //  5.5000
//        input_real[49] = -16'sd1408;  // -2.7500
//        input_real[50] = 16'sd2176;   //  4.2500
//        input_real[51] = -16'sd3200;  // -6.2500
//        input_real[52] = -16'sd3456;  // -6.7500
//        input_real[53] = 16'sd128;    //  0.2500
//        input_real[54] = 16'sd512;    //  1.0000
//        input_real[55] = 16'sd1920;   //  3.7500
//        input_real[56] = 16'sd3456;   //  6.7500
//        input_real[57] = 16'sd384;    //  0.7500
//        input_real[58] = 16'sd1408;   //  2.7500
//        input_real[59] = -16'sd1408;  // -2.7500
//        input_real[60] = -16'sd2688;  // -5.2500
//        input_real[61] = 16'sd1920;   //  3.7500
//        input_real[62] = 16'sd2944;   //  5.7500
//        input_real[63] = -16'sd1792;  // -3.5000
//    end
//    initial begin
//        for (i = 0; i < 64; i = i + 1)
//            input_imag[i] = 16'sd0;
//    end

    
//    // Configuration block
//    initial begin
//        #20;
//        config_data  = 8'd1;  // FFT
//        config_valid = 1'b1;
//        @(posedge aclk);
//        while (!config_ready) @(posedge aclk);
//        config_valid = 1'b0;

//    end
    
//    // Open output files
//    initial begin
//        f_real = $fopen("fft_out_real.txt", "w");
//        f_imag = $fopen("fft_out_imag.txt", "w");
//        if (f_real == 0 || f_imag == 0) begin
//            $display("Error opening output files");
//            $finish;
//        end
//    end
    
//    // Capture FFT outputs
//    always @(posedge aclk) begin
//        if (out_valid && out_ready) begin
//            $fwrite(f_real, "%016b\n", out_data_real);
//            $fwrite(f_imag, "%016b\n", out_data_imag);
//        end
//    end
    
//    // Stop simulation when FFT done
//    always @(posedge aclk) begin
//        if (out_valid && out_last && out_ready) begin
//            $fclose(f_real);
//            $fclose(f_imag);
////            $finish;
//        end
//    end
    
//    // Feed input data to FFT
//    initial begin
//        wait(aresetn == 1);
//        #10;
//        for (i = 0; i < 64; i = i + 1) begin
//            @(posedge aclk);
//            while (!in_ready) @(posedge aclk);  // stall until core ready
//            in_data_real <= input_real[i];
//            in_data_imag <= input_imag[i];
//            in_valid <= 1;
//            in_last  <= (i == 63);
//        end
//        @(posedge aclk);
//        in_valid <= 0;
//        in_last  <= 0;

//    end
    
    

//endmodule












`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Nageshwar - IIT Jammu <nagesh03mehta@gmail.com>
// 
// Design Name: 
// Module Name: FFT64pt_wrapper_tb
// Project Name: Cognitive Radio
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 

//////////////////////////////////////////////////////////////////////////////////
module FFT64pt_wrapper_tb();

    reg aclk;
    reg aresetn;
//    reg signed [15:0] in_data_real;
//    reg signed [15:0] in_data_imag;
    reg [31:0] in_data;
    reg in_valid;
    reg in_last;
    wire in_ready;
    
    reg [7:0] config_data;
    reg config_valid;
    wire config_ready;
    
    wire  [15:0] out_data_real;  // unpacked from 32-bit FFT output bus
    wire  [15:0] out_data_imag;
    wire out_valid;
    wire out_last;
    reg  out_ready;
    
    reg [0:31] input_real[63:0];  // ROM for real input
//    reg [15:0] input_imag[0:63];  // ROM for imag input
    
//    integer f_real, f_imag;
    integer i;
    
    // DUT
    FFT64pt_wrapper tb_in(
        .aclk(aclk),
        .aresetn(aresetn),
        .in_data(in_data),
//        .in_data_imag(in_data_imag),
        .in_valid(in_valid),
        .in_last(in_last),
        .in_ready(in_ready),
        
        .config_data(config_data),
        .config_valid(config_valid),
        .config_ready(config_ready),
        
        .out_data_real(out_data_real),
        .out_data_imag(out_data_imag),
        .out_valid(out_valid),
        .out_last(out_last),
        .out_ready(out_ready)
    );
    
    // Clock generation
//    initial aclk = 0;
    always 
    begin
    #5 aclk = ~aclk;  // 10 ns period
    end
    
    // Reset
    initial begin
        aclk = 0;
        aresetn = 0;
        
        in_valid = 1'b0;
        in_last = 1'b0;
//        in_data_real = 0;
        in_data = 32'd0;
        config_data = 8'b0; //reset
        config_valid = 1'b0;
        out_ready = 1'b1;  // always ready

//        aresetn = 0;
//        repeat (5) @(posedge aclk);
//        aresetn = 1;
    end
    
    // Read input files generated by Python
    initial begin
        #70
        aresetn = 1;
           
//    input_real[ 0] = 16'b1111010010000000;  // -5.7500
//    input_real[ 1] = 16'b0000100000000000;  // 4.0000
//    input_real[ 2] = 16'b0000011010000000;  // 3.2500
//    input_real[ 3] = 16'b1111110000000000;  // -2.0000
//    input_real[ 4] = 16'b0000000100000000;  // 0.5000
//    input_real[ 5] = 16'b0000101100000000;  // 5.5000
//    input_real[ 6] = 16'b0000010000000000;  // 2.0000
//    input_real[ 7] = 16'b0000101010000000;  // 5.2500
//    input_real[ 8] = 16'b1111100010000000;  // -3.7500
//    input_real[ 9] = 16'b1111011100000000;  // -4.5000
//    input_real[10] = 16'b0000110110000000;  // 6.7500
//    input_real[11] = 16'b0000000000000000;  // 0.0000
//    input_real[12] = 16'b0000011000000000;  // 3.0000
//    input_real[13] = 16'b0000001110000000;  // 1.7500
//    input_real[14] = 16'b0000010010000000;  // 2.2500
//    input_real[15] = 16'b0000000000000000;  // 0.0000
//    input_real[16] = 16'b1111011110000000;  // -4.2500
//    input_real[17] = 16'b1111101000000000;  // -3.0000
//    input_real[18] = 16'b1111010110000000;  // -5.2500
//    input_real[19] = 16'b1111110000000000;  // -2.0000
//    input_real[20] = 16'b0000000100000000;  // 0.5000
//    input_real[21] = 16'b1111101010000000;  // -2.7500
//    input_real[22] = 16'b0000010110000000;  // 2.7500
//    input_real[23] = 16'b0000110000000000;  // 6.0000
//    input_real[24] = 16'b0000100000000000;  // 4.0000
//    input_real[25] = 16'b1111100100000000;  // -3.5000
//    input_real[26] = 16'b1111011000000000;  // -5.0000
//    input_real[27] = 16'b1111100110000000;  // -3.2500
//    input_real[28] = 16'b1111011100000000;  // -4.5000
//    input_real[29] = 16'b0000011110000000;  // 3.7500
//    input_real[30] = 16'b0000110010000000;  // 6.2500
//    input_real[31] = 16'b0000110100000000;  // 6.5000
//    input_real[32] = 16'b1111001100000000;  // -6.5000
//    input_real[33] = 16'b0000011100000000;  // 3.5000
//    input_real[34] = 16'b0000000110000000;  // 0.7500
//    input_real[35] = 16'b1111101000000000;  // -3.0000
//    input_real[36] = 16'b1111111010000000;  // -0.7500
//    input_real[37] = 16'b1111010110000000;  // -5.2500
//    input_real[38] = 16'b1111010100000000;  // -5.5000
//    input_real[39] = 16'b0000110110000000;  // 6.7500
//    input_real[40] = 16'b0000001010000000;  // 1.2500
//    input_real[41] = 16'b1111010010000000;  // -5.7500
//    input_real[42] = 16'b1111001100000000;  // -6.5000
//    input_real[43] = 16'b1111011010000000;  // -4.7500
//    input_real[44] = 16'b1111001100000000;  // -6.5000
//    input_real[45] = 16'b1111010110000000;  // -5.2500
//    input_real[46] = 16'b0000000110000000;  // 0.7500
//    input_real[47] = 16'b0000101100000000;  // 5.5000
//    input_real[48] = 16'b0000101100000000;  // 5.5000
//    input_real[49] = 16'b1111101010000000;  // -2.7500
//    input_real[50] = 16'b0000100010000000;  // 4.2500
//    input_real[51] = 16'b1111001110000000;  // -6.2500
//    input_real[52] = 16'b1111001010000000;  // -6.7500
//    input_real[53] = 16'b0000000010000000;  // 0.2500
//    input_real[54] = 16'b0000001000000000;  // 1.0000
//    input_real[55] = 16'b0000011110000000;  // 3.7500
//    input_real[56] = 16'b0000110110000000;  // 6.7500
//    input_real[57] = 16'b0000000110000000;  // 0.7500
//    input_real[58] = 16'b0000010110000000;  // 2.7500
//    input_real[59] = 16'b1111101010000000;  // -2.7500
//    input_real[60] = 16'b1111010110000000;  // -5.2500
//    input_real[61] = 16'b0000011110000000;  // 3.7500
//    input_real[62] = 16'b0000101110000000;  // 5.7500
//    input_real[63] = 16'b1111100100000000;  // -3.5000

input_real[ 0] = 32'b11110100100000000000000000000000;  // -5.7500
input_real[ 1] = 32'b00001000000000000000000000000000;  //  4.0000
input_real[ 2] = 32'b00000110100000000000000000000000;  //  3.2500
input_real[ 3] = 32'b11111100000000000000000000000000;  // -2.0000
input_real[ 4] = 32'b00000001000000000000000000000000;  //  0.5000
input_real[ 5] = 32'b00001011000000000000000000000000;  //  5.5000
input_real[ 6] = 32'b00000100000000000000000000000000;  //  2.0000
input_real[ 7] = 32'b00001010100000000000000000000000;  //  5.2500
input_real[ 8] = 32'b11111000100000000000000000000000;  // -3.7500
input_real[ 9] = 32'b11110111000000000000000000000000;  // -4.5000
input_real[10] = 32'b00001101100000000000000000000000;  //  6.7500
input_real[11] = 32'b00000000000000000000000000000000;  //  0.0000
input_real[12] = 32'b00000110000000000000000000000000;  //  3.0000
input_real[13] = 32'b00000011100000000000000000000000;  //  1.7500
input_real[14] = 32'b00000100100000000000000000000000;  //  2.2500
input_real[15] = 32'b00000000000000000000000000000000;  //  0.0000
input_real[16] = 32'b11110111100000000000000000000000;  // -4.2500
input_real[17] = 32'b11111010000000000000000000000000;  // -3.0000
input_real[18] = 32'b11110101100000000000000000000000;  // -5.2500
input_real[19] = 32'b11111100000000000000000000000000;  // -2.0000
input_real[20] = 32'b00000001000000000000000000000000;  //  0.5000
input_real[21] = 32'b11111010100000000000000000000000;  // -2.7500
input_real[22] = 32'b00000101100000000000000000000000;  //  2.7500
input_real[23] = 32'b00001100000000000000000000000000;  //  6.0000
input_real[24] = 32'b00001000000000000000000000000000;  //  4.0000
input_real[25] = 32'b11111001000000000000000000000000;  // -3.5000
input_real[26] = 32'b11110110000000000000000000000000;  // -5.0000
input_real[27] = 32'b11111001100000000000000000000000;  // -3.2500
input_real[28] = 32'b11110111000000000000000000000000;  // -4.5000
input_real[29] = 32'b00000111100000000000000000000000;  //  3.7500
input_real[30] = 32'b00001100100000000000000000000000;  //  6.2500
input_real[31] = 32'b00001101000000000000000000000000;  //  6.5000
input_real[32] = 32'b11110011000000000000000000000000;  // -6.5000
input_real[33] = 32'b00000111000000000000000000000000;  //  3.5000
input_real[34] = 32'b00000001100000000000000000000000;  //  0.7500
input_real[35] = 32'b11111010000000000000000000000000;  // -3.0000
input_real[36] = 32'b11111110100000000000000000000000;  // -0.7500
input_real[37] = 32'b11110101100000000000000000000000;  // -5.2500
input_real[38] = 32'b11110101000000000000000000000000;  // -5.5000
input_real[39] = 32'b00001101100000000000000000000000;  //  6.7500
input_real[40] = 32'b00000010100000000000000000000000;  //  1.2500
input_real[41] = 32'b11110100100000000000000000000000;  // -5.7500
input_real[42] = 32'b11110011000000000000000000000000;  // -6.5000
input_real[43] = 32'b11110110100000000000000000000000;  // -4.7500
input_real[44] = 32'b11110011000000000000000000000000;  // -6.5000
input_real[45] = 32'b11110101100000000000000000000000;  // -5.2500
input_real[46] = 32'b00000001100000000000000000000000;  //  0.7500
input_real[47] = 32'b00001011000000000000000000000000;  //  5.5000
input_real[48] = 32'b00001011000000000000000000000000;  //  5.5000
input_real[49] = 32'b11111010100000000000000000000000;  // -2.7500
input_real[50] = 32'b00001000100000000000000000000000;  //  4.2500
input_real[51] = 32'b11110011100000000000000000000000;  // -6.2500
input_real[52] = 32'b11110010100000000000000000000000;  // -6.7500
input_real[53] = 32'b00000000100000000000000000000000;  //  0.2500
input_real[54] = 32'b00000010000000000000000000000000;  //  1.0000
input_real[55] = 32'b00000111100000000000000000000000;  //  3.7500
input_real[56] = 32'b00001101100000000000000000000000;  //  6.7500
input_real[57] = 32'b00000001100000000000000000000000;  //  0.7500
input_real[58] = 32'b00000101100000000000000000000000;  //  2.7500
input_real[59] = 32'b11111010100000000000000000000000;  // -2.7500
input_real[60] = 32'b11110101100000000000000000000000;  // -5.2500
input_real[61] = 32'b00000111100000000000000000000000;  //  3.7500
input_real[62] = 32'b00001011100000000000000000000000;  //  5.7500
input_real[63] = 32'b11111001000000000000000000000000;  // -3.5000



    end
//    initial begin
//        for (i = 0; i < 64; i = i + 1)
//            input_imag[i] = 16'sd0;
//    end

    
    // Configuration block
    initial begin
        #110;
        config_data  = 1;  // FFT
        #5 config_valid = 1;
        
        
        while (config_ready == 0) begin
        config_valid = 1;
        end
        #5 config_valid = 0;
    end
    
//    // Open output files
//    initial begin
//        f_real = $fopen("fft_out_real.txt", "w");
//        f_imag = $fopen("fft_out_imag.txt", "w");
//        if (f_real == 0 || f_imag == 0) begin
//            $display("Error opening output files");
//            $finish;
//        end
//    end
    
    // Capture FFT outputs
//    always @(posedge aclk) begin
//        if (out_valid && out_ready) begin
//            $fwrite(f_real, "%016b\n", out_data_real);
//            $fwrite(f_imag, "%016b\n", out_data_imag);
//        end
//    end
    
    // Stop simulation when FFT done
//    always @(posedge aclk) begin
//        if (out_valid && out_last && out_ready) begin
//            $fclose(f_real);
//            $fclose(f_imag);
////            $finish;
//        end
//    end
    
    // Feed input data to FFT
    initial begin
        #110
//        wait(aresetn == 1);
//        #10;
        for (i = 63; i >=0; i = i - 1) begin
//            @(posedge aclk);
            #10
            if(i==0) begin 
                in_last = 1'b1;
            end
            
            in_data = input_real[i];
            in_valid = 1'b1;
            
            while(in_ready == 0) begin 
                in_valid = 1'b1;
            end
        end
        #10
        in_valid = 1'b0;
        in_last  = 1'b0;
     
//            while (!in_ready) @(posedge aclk);  // stall until core ready
//            in_data_real <= input_real[i];
//            in_data_imag <= input_imag[i];
//            in_valid <= 1;
//            in_last  <= (i == 63);
//        end
//        @(posedge aclk);
//        in_valid <= 0;
//        in_last  <= 0;

    end
    
    initial begin 
        #110
        wait(out_valid == 1);
        #30000 out_ready = 1'b0;
    end
    
    

endmodule