`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Nageshwar - IIT Jammu <nagesh03mehta@gmail.com>
// 
// Design Name: 
// Module Name: FFT64pt_wrapper_tb
// Project Name: Cognitive Radio
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 

//////////////////////////////////////////////////////////////////////////////////
module FFT64pt_wrapper_tb();

    reg aclk;
    reg aresetn;
    reg signed [15:0] in_data_real;
    reg signed [15:0] in_data_imag;
    reg in_valid;
    reg in_last;
    wire in_ready;
    
    reg [7:0] config_data;
    reg config_valid;
    wire config_ready;
    
    wire signed [15:0] out_data_real;  // unpacked from 32-bit FFT output bus
    wire signed [15:0] out_data_imag;
    wire out_valid;
    wire out_last;
    reg  out_ready;
    
    reg [15:0] input_real[0:63];  // ROM for real input
    reg [15:0] input_imag[0:63];  // ROM for imag input
    
    integer f_real, f_imag;
    integer i;
    
    // DUT
    FFT64pt_wrapper tb_in(
        .aclk(aclk),
        .aresetn(aresetn),
        .in_data_real(in_data_real),
        .in_data_imag(in_data_imag),
        .in_valid(in_valid),
        .in_last(in_last),
        .in_ready(in_ready),
        
        .config_data(config_data),
        .config_valid(config_valid),
        .config_ready(config_ready),
        
        .out_data_real(out_data_real),
        .out_data_imag(out_data_imag),
        .out_valid(out_valid),
        .out_last(out_last),
        .out_ready(out_ready)
    );
    
    // Clock generation
    initial aclk = 0;
    always #5 aclk = ~aclk;  // 10 ns period
    
    // Reset
    initial begin
        in_valid = 0;
        in_last = 0;
        in_data_real = 0;
        in_data_imag = 0;
        config_data = 0; //reset
        config_valid = 0;
        out_ready = 1;  // always ready

        aresetn = 0;
        repeat (5) @(posedge aclk);
        aresetn = 1;
    end
    
    // Read input files generated by Python
    initial begin
           
        input_real[0]  = -16'sd2944;  // -5.7500
        input_real[1]  = 16'sd2048;   //  4.0000
        input_real[2]  = 16'sd1664;   //  3.2500
        input_real[3]  = -16'sd1024;  // -2.0000
        input_real[4]  = 16'sd256;    //  0.5000
        input_real[5]  = 16'sd2816;   //  5.5000
        input_real[6]  = 16'sd1024;   //  2.0000
        input_real[7]  = 16'sd2688;   //  5.2500
        input_real[8]  = -16'sd1920;  // -3.7500
        input_real[9]  = -16'sd2304;  // -4.5000
        input_real[10] = 16'sd3456;   //  6.7500
        input_real[11] = 16'sd0;      //  0
        input_real[12] = 16'sd1536;   //  3.0000
        input_real[13] = 16'sd896;    //  1.7500
        input_real[14] = 16'sd1152;   //  2.2500
        input_real[15] = 16'sd0;      //  0
        input_real[16] = -16'sd2176;  // -4.2500
        input_real[17] = -16'sd1536;  // -3.0000
        input_real[18] = -16'sd2688;  // -5.2500
        input_real[19] = -16'sd1024;  // -2.0000
        input_real[20] = 16'sd256;    //  0.5000
        input_real[21] = -16'sd1408;  // -2.7500
        input_real[22] = 16'sd1408;   //  2.7500
        input_real[23] = 16'sd3072;   //  6.0000
        input_real[24] = 16'sd2048;   //  4.0000
        input_real[25] = -16'sd1792;  // -3.5000
        input_real[26] = -16'sd2560;  // -5.0000
        input_real[27] = -16'sd1664;  // -3.2500
        input_real[28] = -16'sd2304;  // -4.5000
        input_real[29] = 16'sd1920;   //  3.7500
        input_real[30] = 16'sd3200;   //  6.2500
        input_real[31] = 16'sd3328;   //  6.5000
        input_real[32] = -16'sd3328;  // -6.5000
        input_real[33] = 16'sd1792;   //  3.5000
        input_real[34] = 16'sd384;    //  0.7500
        input_real[35] = -16'sd1536;  // -3.0000
        input_real[36] = -16'sd384;   // -0.7500
        input_real[37] = -16'sd2688;  // -5.2500
        input_real[38] = -16'sd2816;  // -5.5000
        input_real[39] = 16'sd3456;   //  6.7500
        input_real[40] = 16'sd640;    //  1.2500
        input_real[41] = -16'sd2944;  // -5.7500
        input_real[42] = -16'sd3328;  // -6.5000
        input_real[43] = -16'sd2432;  // -4.7500
        input_real[44] = -16'sd3328;  // -6.5000
        input_real[45] = -16'sd2688;  // -5.2500
        input_real[46] = 16'sd384;    //  0.7500
        input_real[47] = 16'sd2816;   //  5.5000
        input_real[48] = 16'sd2816;   //  5.5000
        input_real[49] = -16'sd1408;  // -2.7500
        input_real[50] = 16'sd2176;   //  4.2500
        input_real[51] = -16'sd3200;  // -6.2500
        input_real[52] = -16'sd3456;  // -6.7500
        input_real[53] = 16'sd128;    //  0.2500
        input_real[54] = 16'sd512;    //  1.0000
        input_real[55] = 16'sd1920;   //  3.7500
        input_real[56] = 16'sd3456;   //  6.7500
        input_real[57] = 16'sd384;    //  0.7500
        input_real[58] = 16'sd1408;   //  2.7500
        input_real[59] = -16'sd1408;  // -2.7500
        input_real[60] = -16'sd2688;  // -5.2500
        input_real[61] = 16'sd1920;   //  3.7500
        input_real[62] = 16'sd2944;   //  5.7500
        input_real[63] = -16'sd1792;  // -3.5000
    end
    initial begin
        for (i = 0; i < 64; i = i + 1)
            input_imag[i] = 16'sd0;
    end

    
    // Configuration block
    initial begin
        #20;
        config_data  = 8'd1;  // FFT
        config_valid = 1'b1;
        @(posedge aclk);
        while (!config_ready) @(posedge aclk);
        config_valid = 1'b0;

    end
    
    // Open output files
    initial begin
        f_real = $fopen("fft_out_real.txt", "w");
        f_imag = $fopen("fft_out_imag.txt", "w");
        if (f_real == 0 || f_imag == 0) begin
            $display("Error opening output files");
            $finish;
        end
    end
    
    // Capture FFT outputs
    always @(posedge aclk) begin
        if (out_valid && out_ready) begin
            $fwrite(f_real, "%016b\n", out_data_real);
            $fwrite(f_imag, "%016b\n", out_data_imag);
        end
    end
    
    // Stop simulation when FFT done
    always @(posedge aclk) begin
        if (out_valid && out_last && out_ready) begin
            $fclose(f_real);
            $fclose(f_imag);
//            $finish;
        end
    end
    
    // Feed input data to FFT
    initial begin
        wait(aresetn == 1);
        #10;
        for (i = 0; i < 64; i = i + 1) begin
            @(posedge aclk);
            while (!in_ready) @(posedge aclk);  // stall until core ready
            in_data_real <= input_real[i];
            in_data_imag <= input_imag[i];
            in_valid <= 1;
            in_last  <= (i == 63);
        end
        @(posedge aclk);
        in_valid <= 0;
        in_last  <= 0;

    end
    
    

endmodule

