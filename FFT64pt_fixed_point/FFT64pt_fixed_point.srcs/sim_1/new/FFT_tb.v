`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
module tb_FFT_fixed();

    reg aclk;
    reg aresetn;
    reg [15:0] in_data_real;
    reg [15:0] in_data_imag;
    reg in_valid;
    reg in_last;
    wire in_ready;
    
    reg [7:0] config_data;
    reg config_valid;
    wire config_ready;
    
    wire [15:0] out_data_real;  // assuming your FFT IP output still 32-bit
    wire [15:0] out_data_imag;
    wire out_valid;
    wire out_last;
    reg  out_ready;
    
    reg [15:0] input_real[0:63];  // ROM for real input
    reg [15:0] input_imag[0:63];  // ROM for imag input
    
    integer f_real, f_imag;
    integer i;
    
    // DUT
    FFT_wrapper tb_in(
        .aclk(aclk),
        .aresetn(aresetn),
        .in_data_real(in_data_real),
        .in_data_imag(in_data_imag),
        .in_valid(in_valid),
        .in_last(in_last),
        .in_ready(in_ready),
        
        .config_data(config_data),
        .config_valid(config_valid),
        .config_ready(config_ready),
        
        .out_data_real(out_data_real),
        .out_data_imag(out_data_imag),
        .out_valid(out_valid),
        .out_last(out_last),
        .out_ready(out_ready)
    );
    
    // Clock generation
    initial aclk = 0;
    always #5 aclk = ~aclk;  // 10 ns period
    
    // Reset
    initial begin
        in_valid = 0;
        in_last = 0;
        in_data_real = 0;
        in_data_imag = 0;
        config_data = 0;
        config_valid = 0;
        out_ready = 1;  // always ready

        aresetn = 0;
        repeat (5) @(posedge aclk);
        aresetn = 1;
    end
    
    // Read input files generated by Python
    initial begin
        $readmemb("C:/Users/nages/verilog_projects/FFT64pt_fixed_point/input_data_real_q15.txt", input_real);
        $readmemb("C:/Users/nages/verilog_projects/FFT64pt_fixed_point/input_data_imag_q15.txt", input_imag);

    end
    
    // Configuration block
    initial begin
        #20;
        config_data = 8'd1;
        config_valid = 1'b1;
        wait(config_ready == 1'b1);
        @(posedge aclk);
        config_valid = 0;
    end
    
    // Open output files
    initial begin
        f_real = $fopen("fft_out_real.txt", "w");
        f_imag = $fopen("fft_out_imag.txt", "w");
        if (f_real == 0 || f_imag == 0) begin
            $display("Error opening output files");
            $finish;
        end
    end
    
    // Capture FFT outputs
    always @(posedge aclk) begin
        if (out_valid && out_ready) begin
            $fwrite(f_real, "%032b\n", out_data_real);
            $fwrite(f_imag, "%032b\n", out_data_imag);
        end
    end
    
    // Stop simulation when FFT done
    always @(posedge aclk) begin
        if (out_valid && out_last && out_ready) begin
            $fclose(f_real);
            $fclose(f_imag);
//            $finish;
        end
    end
    
    // Feed input data to FFT
    initial begin
        wait(aresetn == 1);
        #10;
        for (i = 0; i < 64; i = i + 1) begin
            @(posedge aclk);
            in_data_real <= input_real[i];
            in_data_imag <= input_imag[i];
            in_valid <= 1;
            in_last  <= (i == 63);
            wait(in_ready == 1);
        end
        @(posedge aclk);
        in_valid <= 0;
        in_last <= 0;
    end

endmodule
